var documenterSearchIndex = {"docs":
[{"location":"usage/","page":"Usage","title":"Usage","text":"To be written...","category":"page"},{"location":"examples/intro/#Getting-started","page":"Getting started","title":"Getting started","text":"","category":"section"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"Install packages:","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"using Pkg\nPkg.add(\"Jutul\")\nPkg.add(\"JutulDarcy\")","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"If you want the plotting used in the examples, you need this:","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"Pkg.add(\"CairoMakie\")","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"In addition, there is experimental 3D visualization and well plotting found in an unregistered package. At some point in time this will be registered or folded into the main package as a conditional dependency.","category":"page"},{"location":"examples/intro/","page":"Getting started","title":"Getting started","text":"Pkg.add(url=\"https://github.com/sintefmath/JutulViz.jl\")","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"EditURL = \"https://github.com/sintefmath/JutulDarcy.jl/blob/main/examples/mrst_validation.jl\"","category":"page"},{"location":"examples/mrst_validation/#Validation-of-Jutul-against-existing-reservoir-simulators","page":"Validation of reservoir simulator","title":"Validation of Jutul against existing reservoir simulators","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"This example contains validation of Jutul against MRST. In general, minor differences are observed. These can be traced back to a combination of different internal timestepping done by the simulators and that JutulDarcy by default uses a multisegment well formulation while MRST uses a standard instantaneous equilibrium model without well bore storage terms. These differences are most evident when simulators start up.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"These cases have been exported using the MRST jutul module which can export MRST or Eclipse-type of cases to a JutulDarcy-compatible input format. They can then be simulated using simulate_mrst_case.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"using JutulDarcy, Jutul\nusing CairoMakie","category":"page"},{"location":"examples/mrst_validation/#Define-a-few-utilities-for-plotting-the-MRST-results","page":"Validation of reservoir simulator","title":"Define a few utilities for plotting the MRST results","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"We are going to compare well responses against pre-computed results stored inside the JutulDarcy module.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"function mrst_case_path(name)\n    base_path, = splitdir(pathof(JutulDarcy))\n    joinpath(base_path, \"..\", \"test\", \"mrst\", \"$(name).mat\")\nend\n\nfunction mrst_solution(result)\n    return result.extra[:mrst][\"extra\"][1][\"mrst_solution\"]\nend\n\nfunction mrst_well_index(mrst_result, k)\n    return findfirst(isequal(\"$k\"), vec(mrst_result[\"names\"]))\nend\n\nfunction get_mrst_comparison(wdata, ref, wname, t = :bhp)\n    yscale = \"m³/s\"\n    if t == :bhp\n        tname = \"Bottom hole pressure\"\n        mname = \"bhp\"\n        yscale = \"Pa\"\n    elseif t == :qos\n        tname = \"Surface oil rate\"\n        mname = \"qOs\"\n    elseif t == :qws\n        tname = \"Surface water rate\"\n        mname = \"qWs\"\n    elseif t == :qgs\n        tname = \"Surface gas rate\"\n        mname = \"qGs\"\n    else\n        error(\"Not supported: $t\")\n    end\n    jutul = wdata[Symbol(tname)]\n    mrst = ref[mname][:, mrst_well_index(ref, wname)]\n\n    return (jutul, mrst, tname, yscale)\nend\n\nfunction plot_comparison(wells, ref, rep_t, t, wells_keys = keys(wells))\n    fig = Figure()\n    ax = Axis(fig[1, 1], xlabel = \"time (days)\")\n    l = \"\"\n    yscale = \"\"\n    T = rep_t./(3600*24.0)\n    for (w, d) in wells\n        if !(w in wells_keys)\n            continue\n        end\n        jutul, mrst, l, yscale = get_mrst_comparison(d, ref, w, t)\n        lines!(ax, T, abs.(jutul), label = \"$w\")\n        scatter!(ax, T, abs.(mrst), markersize = 8)\n    end\n    axislegend()\n    ax.ylabel[] = \"$l ($yscale)\"\n    fig\nend","category":"page"},{"location":"examples/mrst_validation/#The-Egg-model-(oil-water-compressible)","page":"Validation of reservoir simulator","title":"The Egg model (oil-water compressible)","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"A two-phase model that is taken from the first member of the EGG ensemble. For more details, see the paper where the ensemble is introduced:","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Jansen, Jan-Dirk, et al. \"The egg model–a geological ensemble for reservoir simulation.\" Geoscience Data Journal 1.2 (2014): 192-195.","category":"page"},{"location":"examples/mrst_validation/#Simulate-model","page":"Validation of reservoir simulator","title":"Simulate model","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"egg = simulate_mrst_case(mrst_case_path(\"egg\"), info_level = -1)\nwells = egg.wells\nrep_t = egg.time\nref = mrst_solution(egg);\nnothing #hide","category":"page"},{"location":"examples/mrst_validation/#Compare-well-responses","page":"Validation of reservoir simulator","title":"Compare well responses","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"injectors = [:INJECT1, :INJECT2, :INJECT3, :INJECT4, :INJECT5, :INJECT6, :INJECT7]\nproducers = [:PROD1, :PROD2, :PROD3, :PROD4]","category":"page"},{"location":"examples/mrst_validation/#Bottom-hole-pressures","page":"Validation of reservoir simulator","title":"Bottom hole pressures","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :bhp, injectors)","category":"page"},{"location":"examples/mrst_validation/#Oil-rates","page":"Validation of reservoir simulator","title":"Oil rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qos, producers)","category":"page"},{"location":"examples/mrst_validation/#Water-rates","page":"Validation of reservoir simulator","title":"Water rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qws, producers)","category":"page"},{"location":"examples/mrst_validation/#SPE1-(black-oil,-disgas)","page":"Validation of reservoir simulator","title":"SPE1 (black oil, disgas)","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"A shortened version of the SPE1 benchmark case.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Odeh, A.S. 1981. Comparison of Solutions to a Three-Dimensional Black-Oil Reservoir Simulation Problem. J Pet Technol 33 (1): 13–25. SPE-9723-PA","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"For comparison against other simulators, see the equivialent JutulSPE1 example in the Jutul module for MRST","category":"page"},{"location":"examples/mrst_validation/#Simulate-model-2","page":"Validation of reservoir simulator","title":"Simulate model","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"spe1 = simulate_mrst_case(mrst_case_path(\"spe1\"), info_level = -1)\nwells = spe1.wells\nrep_t = spe1.time\nref = mrst_solution(spe1);\nnothing #hide","category":"page"},{"location":"examples/mrst_validation/#Compare-well-responses-2","page":"Validation of reservoir simulator","title":"Compare well responses","text":"","category":"section"},{"location":"examples/mrst_validation/#Bottom-hole-pressures-2","page":"Validation of reservoir simulator","title":"Bottom hole pressures","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :bhp)","category":"page"},{"location":"examples/mrst_validation/#Gas-rates","page":"Validation of reservoir simulator","title":"Gas rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qgs, [:PRODUCER])","category":"page"},{"location":"examples/mrst_validation/#SPE3-(black-oil,-vapoil)","page":"Validation of reservoir simulator","title":"SPE3 (black oil, vapoil)","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"A black-oil variant of the SPE3 benchmark case.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Kenyon, D. \"Third SPE comparative solution project: gas cycling of retrograde condensate reservoirs.\" Journal of Petroleum Technology 39.08 (1987): 981-997","category":"page"},{"location":"examples/mrst_validation/#Simulate-model-3","page":"Validation of reservoir simulator","title":"Simulate model","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"spe3 = simulate_mrst_case(mrst_case_path(\"spe3\"), info_level = -1)\nwells = spe3.wells\nrep_t = spe3.time\nref = mrst_solution(spe3);\nnothing #hide","category":"page"},{"location":"examples/mrst_validation/#Compare-well-responses-3","page":"Validation of reservoir simulator","title":"Compare well responses","text":"","category":"section"},{"location":"examples/mrst_validation/#Bottom-hole-pressures-3","page":"Validation of reservoir simulator","title":"Bottom hole pressures","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :bhp, [:PRODUCER])","category":"page"},{"location":"examples/mrst_validation/#Gas-rates-2","page":"Validation of reservoir simulator","title":"Gas rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qgs, [:PRODUCER])","category":"page"},{"location":"examples/mrst_validation/#Oil-rates-2","page":"Validation of reservoir simulator","title":"Oil rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qos, [:PRODUCER])","category":"page"},{"location":"examples/mrst_validation/#SPE9-(black-oil,-disgas)","page":"Validation of reservoir simulator","title":"SPE9 (black oil, disgas)","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Example of the SPE9 model exported from MRST running in JutulDarcy.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"Killough, J. E. 1995. Ninth SPE comparative solution project: A   reexamination of black-oil simulation. In SPE Reservoir Simulation   Symposium,  12-15 February 1995, San Antonio, Texas. SPE 29110-MS","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"For comparison against other simulators, see the equivialent JutulSPE9 example in the Jutul module for MRST","category":"page"},{"location":"examples/mrst_validation/#Simulate-model-4","page":"Validation of reservoir simulator","title":"Simulate model","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"spe9 = simulate_mrst_case(mrst_case_path(\"spe9\"), info_level = -1)\nwells = spe9.wells\nrep_t = spe9.time\nref = mrst_solution(spe9);\nnothing #hide","category":"page"},{"location":"examples/mrst_validation/#Compare-well-responses-4","page":"Validation of reservoir simulator","title":"Compare well responses","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"injectors = [:INJE1]\nproducers = [Symbol(\"PROD$i\") for i in 1:25]","category":"page"},{"location":"examples/mrst_validation/#Injector-water-rate","page":"Validation of reservoir simulator","title":"Injector water rate","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qws, injectors)","category":"page"},{"location":"examples/mrst_validation/#Oil-rates-3","page":"Validation of reservoir simulator","title":"Oil rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qos, producers)","category":"page"},{"location":"examples/mrst_validation/#Water-rates-2","page":"Validation of reservoir simulator","title":"Water rates","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :qws, producers)","category":"page"},{"location":"examples/mrst_validation/#Bottom-hole-pressures-4","page":"Validation of reservoir simulator","title":"Bottom hole pressures","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"plot_comparison(wells, ref, rep_t, :bhp, producers)","category":"page"},{"location":"examples/mrst_validation/#Example-on-GitHub","page":"Validation of reservoir simulator","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"","category":"page"},{"location":"examples/mrst_validation/","page":"Validation of reservoir simulator","title":"Validation of reservoir simulator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"EditURL = \"https://github.com/sintefmath/JutulDarcy.jl/blob/main/examples/two_phase_buckley_leverett.jl\"","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Buckley-Leverett-two-phase-problem","page":"Two-phase Buckley-Leverett","title":"Buckley-Leverett two-phase problem","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"The Buckley-Leverett test problem is a classical reservoir simulation benchmark that demonstrates the nonlinear displacement process of a viscous fluid being displaced by a less viscous fluid, typically taken to be water displacing oil.","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Problem-definition","page":"Two-phase Buckley-Leverett","title":"Problem definition","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"This is a simple model without wells, where the flow is driven by a simple source term and a simple constant pressure boundary condition at the outlet. We define a function that sets up a two-phase system, a simple 1D domain and replaces the default relative permeability functions with quadratic functions:","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"k_ralpha(S) = min left(fracS - S_r1 - S_r 1right)^n S_r = 02 n = 2","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"In addition, the phase viscosities are treated as constant parameters of 1 and 5 centipoise for the displacing and resident fluids, respectively.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"The function is parametrized on the number of cells and the number of time-steps used to solve the model. This function, since it uses a relatively simple setup without wells, uses the Jutul functions directly.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"using JutulDarcy, Jutul\nfunction solve_bl(;nc = 100, time = 1.0, nstep = nc)\n    T = time\n    tstep = repeat([T/nstep], nstep)\n    domain = get_1d_reservoir(nc)\n    nc = number_of_cells(domain)\n    timesteps = tstep*3600*24\n    bar = 1e5\n    p0 = 100*bar\n    sys = ImmiscibleSystem((LiquidPhase(), VaporPhase()))\n    model = SimulationModel(domain, sys)\n    kr = BrooksCoreyRelPerm(sys, [2.0, 2.0], [0.2, 0.2])\n    replace_variables!(model, RelativePermeabilities = kr)\n    tot_time = sum(timesteps)\n    pv = pore_volume(domain)\n    irate = 500*sum(pv)/tot_time\n    src  = SourceTerm(1, irate, fractional_flow = [1.0, 0.0])\n    bc = FlowBoundaryCondition(nc, p0/2)\n    forces = setup_forces(model, sources = src, bc = bc)\n    parameters = setup_parameters(model, PhaseViscosities = [1e-3, 5e-3]) # 1 and 5 cP\n    state0 = setup_state(model, Pressure = p0, Saturations = [0.0, 1.0])\n    states, report = simulate(state0, model, timesteps,\n        forces = forces, parameters = parameters, info_level = -1)\n    return states, model, report\nend","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Run-the-base-case","page":"Two-phase Buckley-Leverett","title":"Run the base case","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"We solve a small model with 100 cells and 100 steps to serve as the baseline.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"n, n_f = 100, 1000\nstates, model, report = solve_bl(nc = n)\nprint_stats(report)","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Run-refined-version-(1000-cells,-1000-steps)","page":"Two-phase Buckley-Leverett","title":"Run refined version (1000 cells, 1000 steps)","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"Using a grid with 100 cells will not yield a fully converged solution. We can increase the number of cells at the cost of increasing the runtime a bit. Note that most of the time is spent in the linear solver, which uses a direct sparse LU factorization by default. For larger problems it is recommended to use an iterative solver.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"states_refined, _, report_refined = solve_bl(nc = n_f);\nprint_stats(report_refined)","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Plot-results","page":"Two-phase Buckley-Leverett","title":"Plot results","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"We plot the saturation front for the base case at different times together with the final solution for the refined model. In this case, refining the grid by a factor 10 gave us significantly less smearing of the trailing front.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"using CairoMakie\nx = range(0, stop = 1, length = n)\nx_f = range(0, stop = 1, length = n_f)\nf = Figure()\nax = Axis(f[1, 1], ylabel = \"Saturation\", title = \"Buckley-Leverett\")\nfor i in 1:6:length(states)\n    lines!(ax, x, states[i][:Saturations][1, :], color = :darkgray)\nend\nlines!(ax, x_f, states_refined[end][:Saturations][1, :], color = :red)\nf","category":"page"},{"location":"examples/two_phase_buckley_leverett/#Example-on-GitHub","page":"Two-phase Buckley-Leverett","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"","category":"page"},{"location":"examples/two_phase_buckley_leverett/","page":"Two-phase Buckley-Leverett","title":"Two-phase Buckley-Leverett","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"EditURL = \"https://github.com/sintefmath/JutulDarcy.jl/blob/main/examples/two_phase_gravity_segregation.jl\"","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Gravity-segregation-example","page":"Gravity segregation","title":"Gravity segregation example","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"The simplest type of porous media simulation problem to set up that is not trivial is the transition to equilibrium from an unstable initial condition. Placing a heavy fluid on top of a lighter fluid will lead to the heavy fluid moving down while the lighter fluid moves up.","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Problem-set-up","page":"Gravity segregation","title":"Problem set up","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"We define a simple 1D gravity column with an approximate 10-1 ratio in density between the two compressible phases and let it simulate until equilibrium is reached.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"using JutulDarcy, Jutul\nnc = 100\ndomain = get_1d_reservoir(nc, z_max = 1)","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Fluid-properties","page":"Gravity segregation","title":"Fluid properties","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Define two phases liquid and vapor with a 10-1 ratio reference densities and set up the simulation model.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"bar = 1e5\np0 = 100*bar\nrhoLS, rhoVS = 1000.0, 100.0\ncl, cv = 1e-5/bar, 1e-4/bar\nL, V = LiquidPhase(), VaporPhase()\nsys = ImmiscibleSystem([L, V])\nmodel = SimulationModel(domain, sys)","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Definition-for-phase-mass-densities","page":"Gravity segregation","title":"Definition for phase mass densities","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Replace default density with a constant compressibility function that uses the reference values at the initial pressure.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"density = ConstantCompressibilityDensities(sys, p0, [rhoLS, rhoVS], [cl, cv])\nset_secondary_variables!(model, PhaseMassDensities = density)","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Set-up-initial-state","page":"Gravity segregation","title":"Set up initial state","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Put heavy phase on top and light phase on bottom. Saturations have one value per phase, per cell and consequently a per-cell instantiation will require a two by number of cells matrix as input.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"nl = nc ÷ 2\nsL = vcat(ones(nl), zeros(nc - nl))'\ns0 = vcat(sL, 1 .- sL)\nstate0 = setup_state(model, Pressure = p0, Saturations = s0)","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"Convert time-steps from days to seconds","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"timesteps = repeat([0.02]*3600*24, 150)\n# Perform simulation\nstates, report = simulate(state0, model, timesteps, info_level = -1)","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Plot-results","page":"Gravity segregation","title":"Plot results","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"The 1D nature of the problem allows us to plot all timesteps simultaneously in 2D. We see that the heavy fluid, colored blue, is initially at the top of the domain and the lighter fluid is at the bottom. These gradually switch places until all the heavy fluid is at the lower part of the column.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"using CairoMakie\ntmp = vcat(map((x) -> x[:Saturations][1, :]', states)...)\nf = Figure()\nax = Axis(f[1, 1], xlabel = \"Time\", ylabel = \"Depth\", title = \"Gravity segregation\")\nhm = heatmap!(ax, tmp, colormap = :seismic)\nColorbar(f[1, 2], hm)\nf","category":"page"},{"location":"examples/two_phase_gravity_segregation/#Example-on-GitHub","page":"Gravity segregation","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"","category":"page"},{"location":"examples/two_phase_gravity_segregation/","page":"Gravity segregation","title":"Gravity segregation","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"EditURL = \"https://github.com/sintefmath/JutulDarcy.jl/blob/main/examples/wells_intro.jl\"","category":"page"},{"location":"examples/wells_intro/#Example-with-wells","page":"Intro to wells","title":"Example with wells","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"This example demonstrates how to set up a 3D domain with a layered permeability field, define wells and solve a simple production-injection schedule. We begin by loading the Jutul package that contains generic features like grids and linear solvers and the JutulDarcy package itself.","category":"page"},{"location":"examples/wells_intro/#Preliminaries","page":"Intro to wells","title":"Preliminaries","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"using JutulDarcy, Jutul","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"JutulDarcy uses SI units internally. It is therefore convenient to define a few constants at the start of the script to have more managable numbers later on.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"bar = 1e5\nday = 3600*24.0\nDarcy = 9.869232667160130e-13","category":"page"},{"location":"examples/wells_intro/#Defining-a-porous-medium","page":"Intro to wells","title":"Defining a porous medium","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We start by defining the static part of our simulation problem – the porous medium itself.","category":"page"},{"location":"examples/wells_intro/#Defining-the-grid","page":"Intro to wells","title":"Defining the grid","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The first step is to create a grid for our simulation domain. We make a tiny 5 by 5 grid with 4 layers that discretizes a physical domain of 2000 by 1500 by 50 meters.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"nx = ny = 5\nnz = 4\ndims = (nx, ny, nz)\ng = CartesianMesh(dims, (2000.0, 1500.0, 50.0))","category":"page"},{"location":"examples/wells_intro/#Adding-properties-and-making-a-domain","page":"Intro to wells","title":"Adding properties and making a domain","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The grid by itself does not fully specify a porous medium. For that we need to specify the permeability in each cell and the porosity. Permeability, often denoted by a positive-definite tensor K, describes the relationship between a pressure gradient and the flow through the medium. Porosity is a dimensionless number between 0 and 1 that describes how much of the porous medium is void space where fluids can be present. The assumption of Darcy flow becomes less reasonable for high porosity values and the flow equations break down at zero porosity. A porosity of 0.2 is then a safe choice.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Jutul uses the DataDomain type to store a domain/grid together with data. For porous media simulation, JutulDarcy includes a convenience function reservoir_domain that contains defaults for permeability and porosity. We specify the permeability per-cell with varying values per layer in the vertical direction and a single porosity value for all cells that the function will expand for us. From the output, we can see that basic geometry primitives are also automatically added:","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"nlayer = nx*ny # Cells in each layer\nK = vcat(\n    repeat([0.65], nlayer),\n    repeat([0.3], nlayer),\n    repeat([0.5], nlayer),\n    repeat([0.2], nlayer)\n    )*Darcy\n\ndomain = reservoir_domain(g, permeability = K, porosity = 0.2)","category":"page"},{"location":"examples/wells_intro/#Defining-wells","page":"Intro to wells","title":"Defining wells","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Now that we have a porous medium with all static properties set up, it is time to introduce some driving forces. Jutul assumes no-flow boundary conditions on all boundary faces unless otherwise specified so we can go ahead and add wells to the model.","category":"page"},{"location":"examples/wells_intro/#A-vertical-producer-well","page":"Intro to wells","title":"A vertical producer well","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We will define two wells: A first well is named \"Producer\" and is a vertical well positioned at (1, 1). By default, the setup_vertical_well function perforates all layers in the model.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Prod = setup_vertical_well(domain, 1, 1, name = :Producer);\nnothing #hide","category":"page"},{"location":"examples/wells_intro/#A-single-perforation-injector","page":"Intro to wells","title":"A single-perforation injector","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We also define an injector by setup_well. This function allows us to pass a vector of either cell indices or tuples of logical indices that the well trajectory will follow. We setup the injector in the upper left corner.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Inj = setup_well(domain, [(nx, ny, 1)], name = :Injector);\nnothing #hide","category":"page"},{"location":"examples/wells_intro/#Choosing-a-fluid-system","page":"Intro to wells","title":"Choosing a fluid system","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"To solve multiphase flow with our little toy reservoir we need to pick a fluid system. The type of system determines what physical effects are modelled, what parameters are required and the runtime and accuracy of the resulting simulation. The choice is in practice a trade-off between accuracy, runtime and available data that should be informed by modelling objectives. In this example our goal is to understand how to set up a simple well problem and the ImmiscibleSystem requires a minimal amount of input. We define liquid and gas phases and their densities at some reference conditions and instantiate the system.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"# Set up a two-phase immiscible system and define a density secondary variable\nphases = (LiquidPhase(), VaporPhase())\nrhoLS = 1000.0\nrhoGS = 100.0\nrhoS = [rhoLS, rhoGS]\nsys = ImmiscibleSystem(phases, reference_densities = rhoS)","category":"page"},{"location":"examples/wells_intro/#Creating-the-model","page":"Intro to wells","title":"Creating the model","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The same fluid system can be used for both flow inside the wells and the reservoir. JutulDarcy treats wells as first-class citizens and models flow inside the well bore using the same fluid description as the reservoir, with modified equations to account for the non-Darcy velocities. We call the utility function that sets up all of this for us:","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"model, parameters = setup_reservoir_model(domain, sys, wells = [Inj, Prod])\nmodel","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The model is an instance of the MultiModel from Jutul where a submodel is defined for the reservoir, each of the wells and the facility that controls both wells. In addition we can see the cross-terms that couple these wells together. If we want to see more details on how either of these are set up, we can display for example the reservoir model.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"reservoir = model[:Reservoir]","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We can see that the model contains primary variables, secondary variables (sometimes referred to as properties) and static parameters in addition to the system we already set up. These can be replaced or modified to alter the behavior of the system.","category":"page"},{"location":"examples/wells_intro/#Replace-the-density-function-with-our-custom-version","page":"Intro to wells","title":"Replace the density function with our custom version","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Let us change the definition of phase mass densities for our model. We'd like to model our liquid phase as weakly compressible and the vapor phase with more significant compressibility. A common approach is to define densities rho_alpha^s at some reference pressure p_r and use a phase compressibility c_alpha to extrapolate around that known value.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"rho_alpha (p) = rho_alpha^s exp((p - p_r)c_alpha)","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"This is already implement in Jutul and we simply need to instantiate the variable definition:","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"c = [1e-6/bar, 1e-4/bar]\nρ = ConstantCompressibilityDensities(p_ref = 1*bar, density_ref = rhoS, compressibility = c)","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Before replacing it in the model. This change will propagate to all submodels that have a definition given for PhaseMassDensities, including the wells. The facility, which does not know about densities, will ignore it.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"replace_variables!(model, PhaseMassDensities = ρ);\nnothing #hide","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"This concludes the setup of the model.","category":"page"},{"location":"examples/wells_intro/#Set-up-initial-state","page":"Intro to wells","title":"Set up initial state","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The model is time-dependent and requires initial conditions. For the immiscible model it is sufficient to specify the reference phase pressure and the saturations for both phases, summed up to one. These can be specified per cell or one for the entire grid. Specifying a single pressure for the entire model is not very realistic, but should be fine for our simple example. The initial conditions will equilibrate themselves from gravity fairly quickly.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"state0 = setup_reservoir_state(model, Pressure = 150*bar, Saturations = [1.0, 0.0])","category":"page"},{"location":"examples/wells_intro/#Set-up-report-time-steps-and-injection-rate","page":"Intro to wells","title":"Set up report time steps and injection rate","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We create a set of time-steps. These are report steps where the solution will be reported, but the simulator itself will do internal subdivision of time steps if these values are too coarse for the solvers. We also define an injection rate of a full pore-volume (at reference conditions) of gas.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"dt = repeat([30.0]*day, 12*5)\npv = pore_volume(model, parameters)\ninj_rate = sum(pv)/sum(dt)","category":"page"},{"location":"examples/wells_intro/#Set-up-well-controls","page":"Intro to wells","title":"Set up well controls","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We then set up a total rate target (positive value for injection) together with a corresponding injection control that specifies the mass fractions of the two components/phases for pure gas injection, with surface density given by the known gas density. The producer operates at a fixed bottom hole pressure. These are given as a Dict with keys that correspond to the well names.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"rate_target = TotalRateTarget(inj_rate)\nI_ctrl = InjectorControl(rate_target, [0.0, 1.0], density = rhoGS)\nbhp_target = BottomHolePressureTarget(50*bar)\nP_ctrl = ProducerControl(bhp_target)\ncontrols = Dict()\ncontrols[:Injector] = I_ctrl\ncontrols[:Producer] = P_ctrl\n# Set up the forces","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"Set up forces for the whole model. For this example, all other forces than the well controls are defaulted (amounting to no-flow for the reservoir). Jutul supports either a single set of forces for the entire simulation, or a vector of equal length to dt with varying forces. Reasonable operational limits for wells are also set up by default.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"forces = setup_reservoir_forces(model, control = controls)","category":"page"},{"location":"examples/wells_intro/#Simulate-the-model","page":"Intro to wells","title":"Simulate the model","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We are finally ready to simulate the model for the given initial state state0, report steps dt, parameters and forces. As the model is small, barring any compilation time, this should run in about 300 ms.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"result = simulate_reservoir(state0, model, dt, parameters = parameters, forces = forces)","category":"page"},{"location":"examples/wells_intro/#Unpacking-the-result","page":"Intro to wells","title":"Unpacking the result","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The result contains a lot of data. This can be unpacked to get the most typical desired outputs: Well responses, reservoir states and the time they correspond to.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"wd, states, t = result","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We could in fact equally well have written wd, states, t = simulate_reservoir(...) to arrive at the same result.","category":"page"},{"location":"examples/wells_intro/#Plot-the-producer-responses","page":"Intro to wells","title":"Plot the producer responses","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We load a plotting package to plot the wells.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"using CairoMakie\n# Plot the surface rates at the producer","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"We observe that the total rate does not vary much, but the composition changes from liquid to gas as the front propagate through the domain and hits the producer well.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"qg = wd[:Producer][Symbol(\"Surface gas rate\")]\nqt = wd[:Producer][Symbol(\"Surface total rate\")]\nql = qt - qg\nx = t/day\nfig = Figure()\nax = Axis(fig[1, 1], xlabel = \"Time (days)\",\n                     ylabel = \"Rate (m³/day)\",\n                     title = \"Well production rates\")\nlines!(ax, x, abs.(qg).*day, label = \"Gas\")\nlines!(ax, x, abs.(ql).*day, label = \"Liquid\")\nlines!(ax, x, abs.(qt).*day, label = \"Total\")\naxislegend(position = :rb)\nfig\n# Plot bottom hole pressure of the injector","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"The pressure builds during injection, until the gas breaks through to the other well.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"bh = wd[:Injector][Symbol(\"Bottom hole pressure\")]\nfig = Figure()\nax = Axis(fig[1, 1], xlabel = \"Time (days)\",\n                     ylabel = \"Bottom hole pressure (bar)\",\n                     title = \"Injector bottom hole pressure\")\nlines!(ax, x, bh./bar)\nfig","category":"page"},{"location":"examples/wells_intro/#Example-on-GitHub","page":"Intro to wells","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"","category":"page"},{"location":"examples/wells_intro/","page":"Intro to wells","title":"Intro to wells","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"EditURL = \"https://github.com/sintefmath/JutulDarcy.jl/blob/main/examples/two_phase_unstable_gravity.jl\"","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Gravity-circulation-with-CPR-preconditioner","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"This example demonstrates a more complex gravity driven instability. The problem is a bit larger than the Gravity segregation example, and is therefore set up using the high level API that automatically sets up an iterative linear solver with a constrained pressure residual (CPR) preconditioner and automatic timestepping.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"The high level API uses the more low level Jutul API seen in the other examples under the hood and makes more complex problems easy to set up. The same data structures and functions are used, allowing for deep customization if the defaults are not appropriate.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"using JutulDarcy\nusing Jutul\nusing CairoMakie\ncmap = :seismic\nnx = nz = 100;\nnothing #hide","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Define-the-domain","page":"Gravity circulation with CPR preconditioner","title":"Define the domain","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"D = 10.0\ng = CartesianMesh((nx, 1, nz), (D, 1.0, D))\ndomain = reservoir_domain(g)","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Set-up-model-and-properties","page":"Gravity circulation with CPR preconditioner","title":"Set up model and properties","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"bar = 1e5\np0 = 100*bar\nrhoLS, rhoVS = 1000.0, 500.0 # Definition of fluid phases\ncl, cv = 1e-5/bar, 1e-4/bar\nL, V = LiquidPhase(), VaporPhase()\nsys = ImmiscibleSystem([L, V])\nmodel, parameters = setup_reservoir_model(domain, sys)\ndensity = ConstantCompressibilityDensities(sys, p0, [rhoLS, rhoVS], [cl, cv]) # Replace density with a lighter pair\nreplace_variables!(model, PhaseMassDensities = density);\nkr = BrooksCoreyRelPerm(sys, [2.0, 3.0])\nreplace_variables!(model, RelativePermeabilities = kr)","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Define-initial-saturation","page":"Gravity circulation with CPR preconditioner","title":"Define initial saturation","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Set the left part of the domain to be filled by the vapor phase and the heavy liquid phase in the remainder. To do this, we grab the cell centroids in the x direction from the domain, reshape them to the structured mesh we are working on and define the liquid saturation from there.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"c = domain[:cell_centroids]\nx = reshape(c[1, :], nx, nz)\n\nsL = zeros(nx, nz)\nplane = D/2.0\nfor i in 1:nx\n    for j = 1:nz\n        X = x[i, j]\n        sL[i, j] = clamp(Float64(X > plane), 0, 1)\n    end\nend\nheatmap(sL, colormap = cmap, axis = (title = \"Initial saturation\",))","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Set-up-initial-state","page":"Gravity circulation with CPR preconditioner","title":"Set up initial state","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"sL = vec(sL)'\nsV = 1 .- sL\ns0 = vcat(sV, sL)\nstate0 = setup_reservoir_state(model, Pressure = p0, Saturations = s0)","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Set-the-viscosity-of-the-phases","page":"Gravity circulation with CPR preconditioner","title":"Set the viscosity of the phases","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"By default, viscosity is a parameter and can be set per-phase and per cell.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"μ = parameters[:Reservoir][:PhaseViscosities]\n@. μ[1, :] = 1e-3\n@. μ[2, :] = 5e-3","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Convert time-steps from days to seconds","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"timesteps = repeat([10.0*3600*24], 20)\n_, states, = simulate_reservoir(state0, model, timesteps, parameters = parameters, info_level = 1);\nnothing #hide","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Plot-results","page":"Gravity circulation with CPR preconditioner","title":"Plot results","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Plot initial saturation","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"tmp = reshape(state0[:Reservoir][:Saturations][1, :], nx, nz)\nf = Figure()\nax = Axis(f[1, 1], title = \"Before\")\nheatmap!(ax, tmp, colormap = cmap)","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Plot intermediate sautration","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"tmp = reshape(states[length(states) ÷ 2][:Saturations][1, :], nx, nz)\nax = Axis(f[1, 2], title = \"Half way\")\nhm = heatmap!(ax, tmp, colormap = cmap)","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"Plot final saturation","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"tmp = reshape(states[end][:Saturations][1, :], nx, nz)\nax = Axis(f[1, 3], title = \"After\")\nhm = heatmap!(ax, tmp, colormap = cmap)\nColorbar(f[1, 4], hm)\nf","category":"page"},{"location":"examples/two_phase_unstable_gravity/#Example-on-GitHub","page":"Gravity circulation with CPR preconditioner","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"","category":"page"},{"location":"examples/two_phase_unstable_gravity/","page":"Gravity circulation with CPR preconditioner","title":"Gravity circulation with CPR preconditioner","text":"This page was generated using Literate.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = JutulDarcy","category":"page"},{"location":"","page":"Home","title":"Home","text":"DocTestSetup = quote\n    using Jutul;\n    using JutulDarcy;\nend","category":"page"},{"location":"#JutulDarcy","page":"Home","title":"JutulDarcy","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for JutulDarcy. The documentation is currently limited to docstrings and a series of examples. The examples are sorted by complexity. We suggest you start with Gravity segregation example.","category":"page"},{"location":"","page":"Home","title":"Home","text":"info: Note about units\nJutulDarcy does currently not make us of conversion factors or explicit units can in principle use any consistent unit system. Some default scaling of variables assume that the magnitude pressures and velocities roughly match that of strict SI (e.g. Pascals and cubic meters per second). These scaling factors are primarily used when iterative linear solvers are used.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = Jutul","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"DocTestSetup = quote\n    using Jutul;\n    using JutulDarcy;\nend","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"simulator_config\nsimulate!\nsimulate\nJutulSystem\nJutulMesh\nJutulDomain\nVectorVariables\nMultiModel\nSimulationModel\nSimulator\nsetup_parameters\nsetup_state\nsetup_forces","category":"page"},{"location":"internals/#Jutul.simulator_config","page":"Internals","title":"Jutul.simulator_config","text":"simulator_config(sim; info_level = 3, linear_solver = GenericKrylov())\n\nSet up a simulator configuration object that can be passed onto simulate!.\n\nThere are many options available to configure a given simulator. The best way to get an overview of these possible configuration options is to instatiate the config without any arguments and inspecting the resulting table by calling simulator_config(sim) in the REPL.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Jutul.simulate!","page":"Internals","title":"Jutul.simulate!","text":"simulate!(sim::JutulSimulator, timesteps::AbstractVector; forces = nothing,\n                                                               config = nothing,\n                                                               initialize = true,\n                                                               restart = nothing,\n                                                               state0 = nothing,\n                                                               parameters = nothing,\n                                                               kwarg...)\n\nNon-allocating (or perhaps less allocating) version of simulate!.\n\nArguments\n\ninitialize=true: Perform internal updates as if this is the first time \n\nSee also simulate for additional supported input arguments.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Jutul.simulate","page":"Internals","title":"Jutul.simulate","text":"simulate(state0, model, timesteps, parameters = setup_parameters(model))\nsimulate(state0, model, timesteps, info_level = 3)\nsimulate(state0, model, timesteps; <keyword arguments>)\n\nSimulate a set of timesteps with model for the given initial state0 and optionally specific parameters. Additional keyword arguments are passed onto simulator_config and simulate!. This interface is primarily for convenience, as all storage for the simulator is allocated upon use and discared upon return. If you want to perform multiple simulations with the same model it is advised to instead instantiate Simulator  and combine it with simulate!.\n\nArguments\n\nstate0::Dict: initial state, typically created using setup_state for the model in use.\nmodel::JutulModel: model that describes the discretized system to solve, for example SimulationModel or MultiModel.\ntimesteps::AbstractVector: Vector of desired report steps. The simulator will perform time integration until sum(timesteps)  is reached, providing outputs at the end of each report step.\nparameters=setup_parameters(model): Optional overrides the default parameters for the model.\nforces=nothing: Either nothing (for no forces), a single set of forces from setup_forces(model) or a Vector of such forces with equal length to timesteps.\nrestart=nothing: If an integer is provided, the simulation will attempt to restart from that step. Requires that output_path is provided here or in the config.\nconfig=simulator_config(model): Configuration Dict that holds many fine grained settings for output, linear solver, time-steps, outputs etc.\n\nAdditional arguments are passed onto simulator_config.\n\nSee also simulate!, Simulator, SimulationModel, simulator_config.\n\n\n\n\n\nsimulate(state0, sim::JutulSimulator, timesteps::AbstractVector; parameters = nothing, kwarg...)\n\nSimulate a set of timesteps with simulator for the given initial state0 and optionally specific parameters.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Jutul.JutulSystem","page":"Internals","title":"Jutul.JutulSystem","text":"Abstract type for the physical system to be solved.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Jutul.JutulMesh","page":"Internals","title":"Jutul.JutulMesh","text":"A mesh is a type of domain that has been discretized. Abstract subtype.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Jutul.JutulDomain","page":"Internals","title":"Jutul.JutulDomain","text":"Abstract type for domains where equations can be defined\n\n\n\n\n\n","category":"type"},{"location":"internals/#Jutul.VectorVariables","page":"Internals","title":"Jutul.VectorVariables","text":"Abstract type for vector variables (more than one entry per entity, for example saturations or displacements)\n\n\n\n\n\n","category":"type"},{"location":"internals/#Jutul.MultiModel","page":"Internals","title":"Jutul.MultiModel","text":"MultiModel(models)\n\nA model variant that is made up of many named submodels, each a fully realized SimulationModel.\n\nmodels should be a NamedTuple or Dict{Symbol, JutulModel}.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Jutul.SimulationModel","page":"Internals","title":"Jutul.SimulationModel","text":"SimulationModel(domain, system; <kwarg>)\n\nInstantiate a model for a given system discretized on the domain.\n\n\n\n\n\nSimulationModel(g::JutulMesh, system; discretization = nothing, kwarg...)\n\nType that defines a simulation model - everything needed to solve the discrete equations.\n\nThe minimal setup requires a JutulMesh that defines topology together with a JutulSystem that imposes physical laws.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Jutul.Simulator","page":"Internals","title":"Jutul.Simulator","text":"Simulator(model; <kwarg>)\n\nSet up a simulator object for a model that can be used by simulate!. To avoid manually instantiating the simulator, the non-mutating simulate interface can be used instead.\n\n\n\n\n\n","category":"type"},{"location":"internals/#Jutul.setup_parameters","page":"Internals","title":"Jutul.setup_parameters","text":"setup_parameters(model::JutulModel; name = value)\n\nSet up a parameter storage for a given model with values for the parameter defined in the model.\n\nArguments\n\nname=value: The name of the parameter together with the value(s) of the parameter.\n\nA scalar (or short vector of the right size for VectorVariables) will be repeated over the entire domain, while a vector (or matrix for VectorVariables) with length (number of columns for VectorVariables) equal to the entity count (for example, number of cells for a cell variable) will be used directly.\n\n\n\n\n\n","category":"function"},{"location":"internals/#Jutul.setup_state","page":"Internals","title":"Jutul.setup_state","text":"setup_state(model::JutulModel, name1 = value1, name2 = value2)\n\nSet up a state for a given model with values for the primary variables defined in the model. Normally all primary variables must be initialized in this way.\n\nArguments\n\nname=value: The name of the primary variable together with the value(s) used to initialize the primary variable.\n\nA scalar (or short vector of the right size for VectorVariables) will be repeated over the entire domain, while a vector (or matrix for VectorVariables) with length (number of columns for VectorVariables) equal to the entity count (for example, number of cells for a cell variable) will be used directly.\n\nNote: You likely want to overload [setup_state!]@ref for a custom model instead of setup_state\n\n\n\n\n\n","category":"function"},{"location":"internals/#Jutul.setup_forces","page":"Internals","title":"Jutul.setup_forces","text":"setup_forces(model::JutulModel; force_name = force_value)\n\nSet up forces for a given model. Keyword arguments varies depending on what the model supports.\n\n\n\n\n\n","category":"function"},{"location":"internals/","page":"Internals","title":"Internals","text":"CurrentModule = JutulDarcy","category":"page"},{"location":"internals/","page":"Internals","title":"Internals","text":"Modules = [JutulDarcy]","category":"page"},{"location":"internals/#JutulDarcy.MIN_ACTIVE_WELL_RATE","page":"Internals","title":"JutulDarcy.MIN_ACTIVE_WELL_RATE","text":"(Absolute) Minimum well rate for a well that is not disabled.\n\n\n\n\n\n","category":"constant"},{"location":"internals/#JutulDarcy.MIN_INITIAL_WELL_RATE","page":"Internals","title":"JutulDarcy.MIN_INITIAL_WELL_RATE","text":"(Absolute) Minimum initial rate for wells when controls are updated.\n\n\n\n\n\n","category":"constant"},{"location":"internals/#JutulDarcy.BlackOilX-Tuple{StandardBlackOilSystem{<:Any, <:Any, <:Any, <:Any, :varswitch}, Any}","page":"Internals","title":"JutulDarcy.BlackOilX","text":"BlackOilX(sys::BlackOilVariableSwitchingSystem, p; sw = 0.0, so = 0.0, sg = 0.0, rs = 0.0, rv = 0.0)\n\nHigh level initializer for the black oil unknown degree of freedom. Will try to fill in the gaps unless system is really underspecified.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.CPRPreconditioner","page":"Internals","title":"JutulDarcy.CPRPreconditioner","text":"CPRPreconditioner(p = default_psolve(), s = ILUZeroPreconditioner(); strategy = :quasi_impes, weight_scaling = :unit, update_frequency = 1, update_interval = :iteration, partial_update = true)\n\nConstruct a constrained pressure residual (CPR) preconditioner.\n\nBy default, this is a AMG-BILU(0) version (algebraic multigrid for pressure, block-ILU(0) for the global system).\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.CPRPreconditioner-2","page":"Internals","title":"JutulDarcy.CPRPreconditioner","text":"Constrained pressure residual\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.DisabledControl","page":"Internals","title":"JutulDarcy.DisabledControl","text":"DisabledControl()\n\nControl that disables a well. If a well is disabled, it is disconnected from the surface network and no flow occurs between the well and the top side. Mass transfer can still occur inside the well, and between the well and the reservoir.\n\nSee also ProducerControl, InjectorControl.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.DisabledTarget","page":"Internals","title":"JutulDarcy.DisabledTarget","text":"DisabledTarget(q)\n\nDisabled target used when a well is under DisabledControl() only.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.FlowBoundaryCondition","page":"Internals","title":"JutulDarcy.FlowBoundaryCondition","text":"FlowBoundaryCondition(\ncell,\npressure = DEFAULT_MINIMUM_PRESSURE, \ntemperature = 298.15;\nfractional_flow = nothing,\ndensity = nothing,\ntrans_flow = 1e-12,\ntrans_thermal = 1e-6\n)\n\nBoundary condition for constant values (pressure/temperature)\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.HistoricalReservoirVoidageTarget","page":"Internals","title":"JutulDarcy.HistoricalReservoirVoidageTarget","text":"HistoricalReservoirVoidageTarget(q, weights)\n\nHistorical RESV target for history matching cases.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.ImmiscibleSaturation","page":"Internals","title":"JutulDarcy.ImmiscibleSaturation","text":"A single saturation that represents the \"other\" phase in a three phase compositional system where two phases are predicted by an EoS\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.ImmiscibleSystem-Tuple{Any}","page":"Internals","title":"JutulDarcy.ImmiscibleSystem","text":"ImmiscibleSystem(phases; reference_densities = ones(length(phases)))\nImmiscibleSystem((LiquidPhase(), VaporPhase()), (1000.0, 700.0))\n\nSet up an immiscible system for the given phases with optional reference densitites. This system is easy to specify with Pressure and Saturations as the default primary variables. Immiscible system assume that there is no mass transfer between phases and that a phase is uniform in composition.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.InjectorControl","page":"Internals","title":"JutulDarcy.InjectorControl","text":"InjectorControl(target, mix, [density])\n\nWell control that specifies injection into the reservoir. target specifies the type of target and mix defines the injection mass fractions for all species in the model during injection. \n\nFor example, for a three-component system made up of CO2, H2O and H2, setting [0.1, 0.6, 0.3] would mean that the injection stream would contain 1 part CO2, 6 parts H2O and 3 parts H2 by mass. For an immiscible system (e.g. LiquidPhase(), VaporPhase()) the species corresponds to phases and [0.3, 0.7] would mean a 3 to 7 mixture of liquid and vapor by mass.\n\nThe density of the injected fluid at surface conditions is given by density which is defaulted to 1.0 if not given.\n\nSee also ProducerControl, DisabledControl.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.MinimalTPFAGrid","page":"Internals","title":"JutulDarcy.MinimalTPFAGrid","text":"MinimalTPFAGrid(ϕ, N)\n\nGenerate a minimal grid suitable only for two-point flux discretization (TPFA) for given pore-volumes ϕ and a neighborship matrix N with size (2, n) where n is the number of internal faces.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.MixedWellSegmentFlow","page":"Internals","title":"JutulDarcy.MixedWellSegmentFlow","text":"Two point approximation with flux for wells\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.Perforations","page":"Internals","title":"JutulDarcy.Perforations","text":"Perforations are connections from well cells to reservoir vcells\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.PhaseMassDensities","page":"Internals","title":"JutulDarcy.PhaseMassDensities","text":"Mass density of each phase\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.Pressure","page":"Internals","title":"JutulDarcy.Pressure","text":"Pressure\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.Pressure-Tuple{}","page":"Internals","title":"JutulDarcy.Pressure","text":"Pressure(; max_abs = nothing, max_rel = 0.2, scale = 1e8, maximum = Inf, minimum = DEFAULT_MINIMUM_PRESSURE)\n\nPressure variable definition. max_abs/max_rel maximum allowable absolute/relative change over a Newton iteration, scale is a \"typical\" value used to regularize the linear system, maximum the largest possible value and minimum the smallest.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.ProducerControl","page":"Internals","title":"JutulDarcy.ProducerControl","text":"ProducerControl(target)\n\nWell control for production out of the reservoir. target specifies the type of target (for example BottomHolePressureTarget()).\n\nSee also DisabledControl, InjectorControl.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.ReservoirRelativePermeability","page":"Internals","title":"JutulDarcy.ReservoirRelativePermeability","text":"Interpolated multiphase rel. perm. that is simple (single region, no magic for more than two phases)\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.ReservoirVoidageTarget","page":"Internals","title":"JutulDarcy.ReservoirVoidageTarget","text":"ReservoirVoidageTarget(q, weights)\n\nRESV targets with weights for each pseudo-component\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.Saturations-Tuple{}","page":"Internals","title":"JutulDarcy.Saturations","text":"Saturations(;ds_max = 0.2)\n\nSaturations as primary variable. ds_max controls maximum allowable saturation change between two Newton iterations.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.SegmentWellBoreFrictionHB","page":"Internals","title":"JutulDarcy.SegmentWellBoreFrictionHB","text":"Hagedorn and Brown well bore friction model for a segment.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SinglePhaseRateTarget","page":"Internals","title":"JutulDarcy.SinglePhaseRateTarget","text":"SinglePhaseRateTarget(q, phase)\n\nSingle-phase well target with value q specified for phase.\n\nExamples\n\njulia> SinglePhaseRateTarget(0.001, LiquidPhase())\nSinglePhaseRateTarget of 0.001 [m^3/s] for LiquidPhase()\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SurfaceGasRateTarget","page":"Internals","title":"JutulDarcy.SurfaceGasRateTarget","text":"SurfaceGasRateTarget(q)\n\nWell target of specified gas rate with value q at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SurfaceLiquidRateTarget","page":"Internals","title":"JutulDarcy.SurfaceLiquidRateTarget","text":"SurfaceLiquidRateTarget(q)\n\nWell target of specified liquid rate with value q (liquid/oil and water, but not gas) at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SurfaceOilRateTarget","page":"Internals","title":"JutulDarcy.SurfaceOilRateTarget","text":"SurfaceOilRateTarget(q)\n\nWell target of specified oil rate with value q at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.SurfaceWaterRateTarget","page":"Internals","title":"JutulDarcy.SurfaceWaterRateTarget","text":"SurfaceWaterRateTarget(q)\n\nWell target of specified water rate with value q at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.TabulatedRelPermSimple","page":"Internals","title":"JutulDarcy.TabulatedRelPermSimple","text":"Interpolated multiphase rel. perm. that is simple (single region, no magic for more than two phases)\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.TotalRateTarget","page":"Internals","title":"JutulDarcy.TotalRateTarget","text":"TotalRateTarget(q)\n\nWell target of specified total rate of all phases with value q at surface conditions.\n\n\n\n\n\n","category":"type"},{"location":"internals/#JutulDarcy.full_well_outputs-Tuple{Any, Any, Any}","page":"Internals","title":"JutulDarcy.full_well_outputs","text":"full_well_outputs(model, states, forces; targets = available_well_targets(model.models.Reservoir), shortname = false)\n\nGet the full set of well outputs after a simulation has occured, for plotting or other post-processing.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.replace_target","page":"Internals","title":"JutulDarcy.replace_target","text":"replace_target(ctrl, new_target)\n\nCreate new well control using ctrl as a template that operates under new_target.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.reservoir_domain-Tuple{Any}","page":"Internals","title":"JutulDarcy.reservoir_domain","text":"reservoir_domain(g; permeability = 9.869232667160130e-14, porosity = 0.1, kwarg...)\n\nSet up a DataDomain instance for given mesh or other representation g. permeability and porosity are then added to the domain. If scalars are passed, they are expanded to cover all cells. Arrays are asserted to match all cells. Permeability is either one value per cell (diagonal scalar), one value per dimension given in each row (for a diagonal tensor) or a vector that represents a compact full tensor representation (6 elements in 3D, 3 in 2D).\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.reservoir_linsolve","page":"Internals","title":"JutulDarcy.reservoir_linsolve","text":"reservoir_linsolve(model, precond = :cpr; <keyword arguments>)\n\nSet up iterative linear solver for a reservoir model from setup_reservoir_model.\n\nArguments\n\nmodel: Reservoir model that will linearize the equations for the linear solver\nprecond=:cpr: Preconditioner type to use: Either :cpr (Constrained-Pressure-Residual) or :ilu0 (block-incomplete-LU) (no effect if solver = :direct).\nv=0: verbosity (can lead to a large amount of output)\nsolver=:bicgstab: the symbol of a Krylov.jl solver (typically :gmres or :bicgstab)\nupdate_interval=:once: how often the CPR AMG hierarchy is reconstructed (:once, :iteration, :ministep, :step)\nupdate_interval_partial=:iteration: how often the pressure system is updated in CPR\nmax_coarse: max size of coarse level if using AMG\ncpr_type=nothing: type of CPR (:true_impes, :quasi_impes or nothing for automatic)\npartial_update=true: perform partial update of CPR preconditioner outside of AMG update (see above)\nrtol=1e-3: relative tolerance for the linear solver\nmax_iterations=100: limit for linear solver iterations\n\nAdditional keywords are passed onto the linear solver constructor.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.setup_reservoir_forces-Tuple{MultiModel}","page":"Internals","title":"JutulDarcy.setup_reservoir_forces","text":"setup_reservoir_forces(model; control = nothing, limits = nothing, set_default_limits = true, <keyword arguments>)\n\nSet up driving forces for a reservoir model with wells\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_reservoir_model-Tuple{DataDomain, Any}","page":"Internals","title":"JutulDarcy.setup_reservoir_model","text":"setup_reservoir_model(reservoir, system; wells = [], <keyword arguments>)\nsetup_reservoir_model(reservoir, system; wells = [], context = DefaultContext(), reservoir_context = nothing, backend = :csc, <keyword arguments>)\n\nSet up a reservoir MultiModel for a given reservoir DataDomain typically set up from  reservoir_domain and an optional vector of wells that are created using setup_vertical_well and  setup_well.\n\nThe routine automatically sets up a facility and couples the wells with the reservoir and that facility.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_reservoir_simulator","page":"Internals","title":"JutulDarcy.setup_reservoir_simulator","text":"setup_reservoir_simulator(models, initializer, parameters = nothing; <keyword arguments>)\n\nArguments\n\nmodels: either a single model or a Dict with the key :Reservoir for multimodels\ninitializer: used to setup state0, must be compatible with model\nparameters: initialized parameters, must be compatible with model if provided\nlinear_solver=:bicgstab: iterative solver to use (provided model supports it)\nprecond=:cpr: preconditioner for iterative solver: Either :cpr or :ilu0.\nrtol=1e-3: relative tolerance for linear solver\ninitial_dt=3600*24.0: initial time-step in seconds (one day by default)\ntarget_its=8: target number of nonlinear iterations per time step\noffset_its=1: dampening parameter for time step selector where larger values lead to more pessimistic estimates.\ntol_cnv=1e-3: maximum allowable point-wise error (volume-balance)\ntol_mb=1e-7: maximum alllowable integrated error (mass-balance)\nspecialize=false: use deep specialization of storage for faster execution, but significantly more compile time\n\nAdditional keyword arguments are passed onto simulator_config.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.setup_reservoir_state-Tuple{Any}","page":"Internals","title":"JutulDarcy.setup_reservoir_state","text":"setup_reservoir_state(model, <keyword arguments>)\n# Ex: For immiscible two-phase\nsetup_reservoir_state(model, Pressure = 1e5, Saturations = [0.2, 0.8])\n\nConvenience constructor that initializes a state for a MultiModel set up using setup_reservoir_model. The main convenience over setup_state is only the reservoir initialization values need be provided: wells are automatically initialized from the connected reservoir cells.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_vertical_well-NTuple{4, Any}","page":"Internals","title":"JutulDarcy.setup_vertical_well","text":"setup_vertical_well(g, K, i, j; heel = 1, toe = grid_dims_ijk(g)[3], kwarg...)\n\nSet up a vertical well for given grid g and permeability K at logical indices i, j perforating all cells starting at k-logical index heel to toe.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_vertical_well-Tuple{DataDomain, Any, Any}","page":"Internals","title":"JutulDarcy.setup_vertical_well","text":"setup_vertical_well(D::DataDomain, i, j; <kwarg>)\n\nSet up a vertical well with a DataDomain input that represents the porous medium / reservoir where the wells it to be placed.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.setup_well-Tuple{DataDomain, Any}","page":"Internals","title":"JutulDarcy.setup_well","text":"setup_well(D::DataDomain, reservoir_cells; skin = 0.0, Kh = nothing, radius = 0.1, dir = :z)\n\nSet up a well in reservoir_cells with given skin factor and radius. The order of cells matter as it is treated as a trajectory.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.simulate_mrst_case-Tuple{Any}","page":"Internals","title":"JutulDarcy.simulate_mrst_case","text":"simulate_mrst_case(file_name; kwarg...)\n\nSimulate a MRST case from file_name as exported by writeJutulInput in MRST.\n\nArguments\n\nfile_name::String: The path to a .mat file that is to be simulated.\nextra_outputs::Vector{Symbol} = [:Saturations]: Additional variables to output from the simulation.\nwrite_output::Bool = true: Write output (in the default JLD2 format)\noutput_path = nothing: Directory for output files. Files will be written under this directory. Defaults to the folder of file_name.\nwrite_mrst = true: Write MRST compatible output after completed simulation that can be read by readJutulOutput in MRST.\nbackend=:csc: choice of backend for linear systems. :csc for default Julia sparse, :csr for experimental parallel CSR.\nverbose=true: print some extra information specific to this routine upon calling\nnthreads=Threads.nthreads(): number of threads to use\nlinear_solver=:bicgstab: name of Krylov.jl solver to use, or :direct (for small cases only)\ninfo_level=0: standard Jutul info_level. 0 for minimal printing, -1 for no printing, 1-5 for various levels of verbosity\n\nAdditional input arguments are passed onto setup_reservoir_simulator and simulator_config if applicable.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.two_phase_compositional_mass!-Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Any, Val{false}, Any}","page":"Internals","title":"JutulDarcy.two_phase_compositional_mass!","text":"Update total masses for two-phase compositional\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.two_phase_compositional_mass!-Tuple{Any, Any, Any, Any, Any, Any, Any, Any, Any, Val{true}, Any}","page":"Internals","title":"JutulDarcy.two_phase_compositional_mass!","text":"Update total masses for two-phase compositional where another immiscible phase is present\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_mismatch-NTuple{9, Any}","page":"Internals","title":"JutulDarcy.well_mismatch","text":"well_mismatch(qoi, wells, model_f, states_f, model_c, state_c, dt, step_no, forces; <keyword arguments>)\n\nCompute well mismatch for a set of qoi's (well targets) and a set of well symbols.\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_output","page":"Internals","title":"JutulDarcy.well_output","text":"well_output(model, states, well_symbol, forces, target = BottomHolePressureTarget)\n\nGet a specific well output from a valid operational target once a simulation is completed an states are available.\n\n\n\n\n\n","category":"function"},{"location":"internals/#JutulDarcy.well_target-Tuple{Any, BottomHolePressureTarget, Any, Any, Any, Any}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (bhp)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{Any, DisabledTarget, Any, Any, Any, Any}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (disabled, zero value)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{InjectorControl, JutulDarcy.SurfaceVolumeTarget, Any, Any, Any, Any}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (surface volume, injector)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{InjectorControl, TotalRateTarget, Any, Any, Any, Any}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (surface volume, injector)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{ProducerControl, JutulDarcy.ReservoirVoidageTarget, Any, Any, Any, Any}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (RESV, producer)\n\n\n\n\n\n","category":"method"},{"location":"internals/#JutulDarcy.well_target-Tuple{ProducerControl, JutulDarcy.SurfaceVolumeTarget, Any, Any, Any, Any}","page":"Internals","title":"JutulDarcy.well_target","text":"Well target contribution from well itself (surface volume, producer)\n\n\n\n\n\n","category":"method"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"EditURL = \"https://github.com/sintefmath/JutulDarcy.jl/blob/main/examples/five_spot_ensemble.jl\"","category":"page"},{"location":"examples/five_spot_ensemble/#Quarter-five-spot-example","page":"Quarter-five-spot with variation","title":"Quarter-five-spot example","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"The quarter-five-spot is a standard test problem that simulates 1/4 of the five spot well pattern by arguing for axial symmetry. The problem contains an injector in one corner and the producer in the opposing corner, with a significant volume of fluids injected into the domain.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"using JutulDarcy, Jutul\nnx = 50","category":"page"},{"location":"examples/five_spot_ensemble/#Setup","page":"Quarter-five-spot with variation","title":"Setup","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"We define a function that, for a given porosity field, computes a solution with an estimated permeability field. For assumptions and derivation of the specific form of the Kozeny-Carman relation used in this example, see Lie, Knut-Andreas. An introduction to reservoir simulation using MATLAB/GNU Octave: User guide for the MATLAB Reservoir Simulation Toolbox (MRST). Cambridge University Press, 2019, Section 2.5.2","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"function perm_kozeny_carman(Φ)\n    return ((Φ^3)*(1e-5)^2)/(0.81*72*(1-Φ)^2);\nend\n\nfunction simulate_qfs(porosity = 0.2)\n    bar = 1e5\n    day = 3600*24.0\n    Dx = 1000.0\n    Dz = 10.0\n    Darcy = 9.869232667160130e-13\n    mesh = CartesianMesh((nx, nx, 1), (Dx, Dx, Dz))\n    K = perm_kozeny_carman.(porosity)\n    domain = reservoir_domain(mesh, permeability = K, porosity = porosity)\n    Inj = setup_vertical_well(domain, 1, 1, name = :Injector);\n    Prod = setup_vertical_well(domain, nx, nx, name = :Producer);\n    phases = (LiquidPhase(), VaporPhase())\n    rhoLS = 1000.0\n    rhoGS = 700.0\n    rhoS = [rhoLS, rhoGS]\n    sys = ImmiscibleSystem(phases, reference_densities = rhoS)\n    model, parameters = setup_reservoir_model(domain, sys, wells = [Inj, Prod])\n    c = [1e-6/bar, 1e-6/bar]\n    ρ = ConstantCompressibilityDensities(p_ref = 150*bar, density_ref = rhoS, compressibility = c)\n    kr = BrooksCoreyRelPerm(sys, [2.0, 2.0])\n    replace_variables!(model, PhaseMassDensities = ρ, RelativePermeabilities = kr);\n\n    state0 = setup_reservoir_state(model, Pressure = 150*bar, Saturations = [1.0, 0.0])\n    dt = repeat([30.0]*day, 12*10)\n    dt = vcat([0.1, 1.0, 10.0], dt)\n    inj_rate = Dx*Dx*Dz*0.2/sum(dt) # 1 PVI if average porosity is 0.2\n\n    rate_target = TotalRateTarget(inj_rate)\n    I_ctrl = InjectorControl(rate_target, [0.0, 1.0], density = rhoGS)\n    bhp_target = BottomHolePressureTarget(50*bar)\n    P_ctrl = ProducerControl(bhp_target)\n    controls = Dict()\n    controls[:Injector] = I_ctrl\n    controls[:Producer] = P_ctrl\n    forces = setup_reservoir_forces(model, control = controls)\n    return simulate_reservoir(state0, model, dt, parameters = parameters, forces = forces, info_level = -1)\nend\n# ## Simulate base case","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"This will give the solution with uniform porosity of 0.2.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"ws, states, report_time = simulate_qfs()\n# ### Plot the solution of the base case","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"We observe a radial flow pattern initially, before coning occurs near the producer well once the fluid has reached the opposite corner. The uniform permeability and porosity gives axial symmetry at x=y.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"using CairoMakie\nto_2d(x) = reshape(vec(x), nx, nx)\nget_sat(state) = to_2d(state[:Saturations][2, :])\nnt = length(report_time)\nfig = Figure()\nh = nothing\nax = Axis(fig[1, 1])\nh = contourf!(ax, get_sat(states[nt÷3]))\nax = Axis(fig[1, 2])\nh = contourf!(ax, get_sat(states[nt]))\nColorbar(fig[1, end+1], h)\nfig","category":"page"},{"location":"examples/five_spot_ensemble/#Create-10-realizations","page":"Quarter-five-spot with variation","title":"Create 10 realizations","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"We create a small set of realizations of the same model, with porosity that is uniformly varying between 0.05 and 0.3. This is not especially sophisticated geostatistics - for a more realistic approach, take a look at GeoStats.jl. The main idea is to get significantly different flow patterns as the porosity and permeability changes.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"N = 10\nsaturations = []\nwells = []\nreport_step = nt\nfor i = 1:N\n    poro = 0.05 .+ 0.25*rand(Float64, (nx*nx))\n    ws, states, rt = simulate_qfs(poro)\n    push!(wells, ws)\n    push!(saturations, get_sat(states[report_step]))\nend","category":"page"},{"location":"examples/five_spot_ensemble/#Plot-the-oil-rate-at-the-producer-over-the-ensemble","page":"Quarter-five-spot with variation","title":"Plot the oil rate at the producer over the ensemble","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"using Statistics\nfig = Figure()\nax = Axis(fig[1, 1])\nfor i = 1:N\n    ws = wells[i]\n    q = -ws[:Producer][Symbol(\"Surface oil rate\")]\n    lines!(ax, report_time, q)\nend\nxlims!(ax, [mean(report_time), report_time[end]])\nylims!(ax, 0, 0.0075)\nfig","category":"page"},{"location":"examples/five_spot_ensemble/#Plot-the-average-saturation-over-the-ensemble","page":"Quarter-five-spot with variation","title":"Plot the average saturation over the ensemble","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"avg = mean(saturations)\nfig = Figure()\nh = nothing\nax = Axis(fig[1, 1])\nh = contourf!(ax, avg)\nfig","category":"page"},{"location":"examples/five_spot_ensemble/#Plot-the-isocontour-lines-over-the-ensemble","page":"Quarter-five-spot with variation","title":"Plot the isocontour lines over the ensemble","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"fig = Figure()\nh = nothing\nax = Axis(fig[1, 1])\nfor s in saturations\n    contour!(ax, s, levels = 0:0.1:1)\nend\nfig","category":"page"},{"location":"examples/five_spot_ensemble/#Example-on-GitHub","page":"Quarter-five-spot with variation","title":"Example on GitHub","text":"","category":"section"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"If you would like to run this example yourself, it can be downloaded from the JutulDarcy.jl GitHub repository.","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"","category":"page"},{"location":"examples/five_spot_ensemble/","page":"Quarter-five-spot with variation","title":"Quarter-five-spot with variation","text":"This page was generated using Literate.jl.","category":"page"}]
}
